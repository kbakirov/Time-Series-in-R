data=read.csv(file="http://eric.univ-lyon2.fr/~jjacques/Download/DataSet/varicelle.csv")
print(data)
plot(data$x)
varicelle<-ts(data$x,start=c(1931,1),end=c(1972,6),freq=12)
plot(varicelle)
#Plot the time series.
library(forecast)
install.packages("forecast")
#Plot the time series.
library(forecast)
library(ggplot2)
autoplot(varicelle) +
ggtitle('Number of varicella per months')+
xlab('year')+
ylab('Number of varicella')
#Is there somme trend, seasonal pattern or cyclic pattern?
ggseasonplot(varicelle,year.labels= TRUE,year.labels.left=TRUE)
#What is the mean mensual number of varicella?
mean(varicelle)
#Plot the correlogram and interpret it.
tmp=acf(varicelle,type="cor",plot = FALSE)
tmp$acf[1:3,1,1]
plot(tmp)
#Plot the seasonal plot.
serie=cos(2*pi/12*(1:100))
par(mfrow=c(1,2))
plot(ts(serie))
acf(serie)
#Compute the annual numbers of varicella and plot them from 1931 to 1972.
varicelle_annual<-ts(data$x,start=c(1931,1),end=c(1972,1),freq=12)
plot(varicelle_annual)
#Compute the annual numbers of varicella and plot them from 1931 to 1972.
varicelle_annual<-ts(data$x,start=c(1931,1),end=c(1972,1),freq=1)
plot(varicelle_annual)
mod=lm(serie~temps)
plot(ts(serie),xlim=c(1,120),ylim=c(0,120))
abline(mod$coefficients,col="red")
library(fpp)
install.packages("fpp")
library(fpp)
data(livestock)
autoplot(livestock) +
xlab("year") +
ylab("Sheep in Asia (millions)")
e1 <- tsCV(livestock, ses, h=1)
e2 <- tsCV(livestock, holt, h=1)
e3 <- tsCV(livestock, holt, damped=TRUE, h=1)
mean(e1^2, na.rm=TRUE)
mean(e2^2, na.rm=TRUE)
mean(e3^2, na.rm=TRUE)
HWd=holt(livestock,damped=TRUE,h=12)
HWd[["model"]]
autoplot(livestock) +
autolayer(HWd) +
xlab("year") +
ylab("Sheep in Asia (millions)")
getwd()
data=read.table(file = "C:/Users/Kuanysh/Documents/Github/Time-Series-in-R/Exam")
library(xlsx)
install.packages("xlsx")
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
# first row contains variable names
library(xlsx)
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
install.packages("readxl")
library(readxl)
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
install.packages("XLConnect")
library(XLConnect)
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
mydata <- read.xls("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
# first row contains variable names
library(xls)
install.packages("readxl")
library(readxl)
mydata <- read_excel("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
# first row contains variable names
library(xlsx)
library(openxlsx)
install.packages(openxlsx)
install.packages("openxlsx")
library(openxlsx)
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam", 1)
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam")
require("xlsx")
read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam",1)
read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam")
remove.packages("openxlsx", lib="~/R/win-library/3.6")
library(tidyverse)
install.packages(readxl)
library(readxl)
readxl_example()
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam")
any(grepl("xlsx",installed.packages()))
# first row contains variable names
library(xlsx)
library("xlsx")
library("xlsx")
library(tidyverse)
any(grepl("xlsx",installed.packages()))
mydata <- read.xlsx("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam")
library("xlsx")
Sys.setenv(JAVA_HOME = "C:/Program Files/Java/jdk1.8.0_101/")
library("xlsx")
system("java -version")
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121') # for 64-bit version
library(rJava)
mydata <- read.csv("Elec-train.csv")
mydata <- read.csv("Elec-train.csv")
getwd()
setwd("C:/Users/Kuanysh/Documents/GitHub/Time-Series-in-R/Exam")
getwd()
mydata <- read.csv("Elec-train.csv")
print(mydata)
plot(mydata$Timestamp, type='l', xlim=c(1,100),ylim=c(1,100), xlab='time',ylab='' )
plot(mydata$Timestamp, type='l', xlim=c(1,2000),ylim=c(1,100), xlab='time',ylab='' )
plot(mydata$Timestamp, type='l', xlim=c(1,500),ylim=c(1,100), xlab='time',ylab='' )
plot(mydata$Timestamp, type='l', xlim=c(1,500),ylim=c(1,5000), xlab='time',ylab='' )
library(fpp2)
install.packages("fpp2")
install.packages("fpp2")
library(fpp2)
autoplot(mydata)
elec_test=window(elecdaily,start=c(52,1),end=c(52,7))
View(elec_test)
autoplot(mydata)
fit=auto.arima(elec_train[,"Demand"],xreg=elec_train[,2:3])
elec_train=window(elecdaily,start=c(1,1),end=c(51,7))
elec_test=window(elecdaily,start=c(52,1),end=c(52,7))
fit=auto.arima(elec_train[,"Demand"],xreg=elec_train[,2:3])
prev=forecast(fit,h=7,xreg=elec_test[,2:3])
autoplot(elec_test)+autolayer(prev$mean)
print(sqrt(mean((prev$mean-elec_test)^2)))
elec_train=window(mydata,start=c(1,1),end=c(51,7))
library(fpp2)
autoplot(mydata)
elec_train=window(mydata,start=c(1,1),end=c(51,7))
elec_test=window(mydata,start=c(52,1),end=c(52,7))
elec_train=window(mydata,start=c(1,1),end=c(51,2))
autoplot(elecdaily)
autoplot(mydata$Timestamp)
autoplot(mydata)
mydata %>% stlf() %>% autoplot()
print(mydata)
timeseries <- ts(mydata$Timestamp, start=c(1/1/2010), end=c(2/17/2010))
timeseries <- ts(mydata$Timestamp, start=c(1/1/2010), end=c(17/2/2010))
timeseries <- ts(mydata$Timestamp, start=c(1,1), end=c(2,2))
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(1,1), end=c(12,2))
plot(timeseries)
library(forecast)
library(ggplot2)
autoplot(timeseries) +
ggtitle('Number of varicella per months')+
xlab('year')+
ylab('Number of varicella')
View(mydata)
View(mydata)
class(mydata$Timestamp)
# view sample data
head(harMet_15Min$datetime)
# view sample data
head(mydata$Timestamp)
# convert column to date class
dateOnly <- as.Date(mydata$Timestamp)
# view data
head(mydata$Timestamp)
# Convert character data to date (no time)
myDate <- as.Date("1/1/2010 1:15")
str(myDate)
# Convert character data to date (no time)
myDate <- as.Date("1-1-2010 1:15")
str(myDate)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,2))
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,1))
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,1), frequency = 1)
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,2), frequency = 1)
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,12), frequency = 1)
plot(timeseries)
autoplot(mydata)
autoplot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2010,1), end=c(2010,10), frequency = 1)
plot(timeseries)
plot(mydata$Power..kW., type='l', xlab='Power(kW)',ylab='Temperature')
plot(mydata$Temp..C.., type='l', xlab='time',ylab='Temperature')
plot(mydata$Timestamp, type='l', xlim=c(1,500),ylim=c(1,5000), xlab='time',ylab='' )
plot(mydata$Timestamp, 1:10, type='l', xlim=c(1,500),ylim=c(1,5000), xlab='time',ylab='' )
autoplot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(2000,1), end=c(2010,10), frequency = 1)
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(1), end=c(12), frequency = 1)
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(1), end=c(2), frequency = 1)
plot(timeseries)
timeseries <- ts(mydata$Timestamp, start=c(1), end=c(4604), frequency = 1)
plot(timeseries)
autoplot(timeseries)
plot(timeseries)
timeseries <- ts(mydata$Power..kW., start=c(2010), frequency = 1)
plot(timeseries)
power_kw <- ts(mydata$Power..kW., start=c(2010), frequency = 1)
plot(timeseries)
plot(power_kw)
power_kw <- ts(mydata$Power..kW., start=c(2010), frequency = 12)
plot(power_kw)
mydata <- read.csv("Elec-train.csv")
print(mydata)
plot(mydata$Power..kW., type='l', xlab='Power(kW)',ylab='Temperature')
plot(mydata$Temp..C.., type='l', xlab='time',ylab='Temperature')
plot(mydata$Timestamp, type='l', xlim=c(1,500),ylim=c(1,5000), xlab='time',ylab='' )
plot(mydata$Power..kW., type='l', xlab='Power(kW)',ylab='Temperature')
plot(mydata$Temp..C.., type='l', xlab='time',ylab='Temperature')
power_kw <- ts(mydata$Power..kW., start=c(2010), frequency = 60)
plot(power_kw)
power_kw <- ts(mydata$Power..kW., start=c(1/1/2010 1:15), frequency = 60)
power_kw <- ts(mydata$Power..kW., start=c(1/1/2010), frequency = 60)
plot(power_kw)
power_kw <- ts(mydata$Power..kW., start=c(1/1/2010), frequency = 24)
plot(power_kw)
power_kw <- ts(mydata$Power..kW., start=c(1/1/2010), frequency = 1440)
plot(power_kw)
p1 <- autoplot(mydata)+ylab("Electricity consumption")+xlab("Days")+scale_x_continuous(breaks = seq(1,by=2))
power_kw <- ts(mydata$Power..kW., start=c(1/1/2010), frequency = 53)
plot(power_kw)
#2. Preprocessing
library(zoo)
#2. Preprocessing
library(zoo)
NAs<-(tmp_mydata)[NAs]<-TRUE
tmp_mydata<-mydata[,1:3]
NAs<-(tmp_mydata)[NAs]<-TRUE
#2. Preprocessing
library(zoo)
NAs<-(tmp_mydata)[NAs]<-TRUE
NAs<-(tmp_mydata)[NAs]<-TRUE
NAs<-(tmp_mydata)<-TRUE
NAs<-(tmp_mydata)=="?"
is.na(tmp_mydata)[NAs] <- TRUE
tmp_mydata$Power..kW.<-na.locf(tmp_mydata$Power..kW.,fromLast = FALSE)
#3.Change the data format.
agg_Month <-
aggregate(trainData,by=list(as.yearmon(trainData$hP_Date,"%d
%m%Y")), FUN=mean, na.rm=TRUE)
#3.Change the data format.
agg_Month <-
aggregate(tmp_mydata,by=list(as.yearmon(tmp_mydata$hP_Date,"%d
%m%Y")), FUN=mean, na.rm=TRUE)
print(tmp_mydata)
View(tmp_mydata)
# convert date column to date class
tmp_mydata$Timestamp <- as.Date(tmp_mydata$Timestamp,
format = "%m/%d/%y")
class(tmp_mydata$Timestamp)
# view results
head(boulder_precip$DATE)
# view results
head(tmp_mydata$Timestamp)
# convert date column to date class
tmp_mydata$Timestamp <- as.Date(tmp_mydata$Timestamp,
format = "%m/%d/%Y")
# view R class of data
class(tmp_mydata$Timestamp)
# view results
head(tmp_mydata$Timestamp)
ggplot(data = tmp_mydata, aes(x = Timestamp, y = Power..kW.)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Total daily ",
subtitle = "",
x = "Date", y = "Electricity consumption")
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 365, start = c(1))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 365, start = c(2010))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 60, start = c(2010))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 1, start = c(2010))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 1, start = c(1/1/2010))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 365, start = c(1/1/2010))
plot(tsDaily)
#4.Plot
tsDaily <-ts(tmp_mydata$Power..kW., frequency = 24, start = c(1/1/2010))
plot(tsDaily)
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M', tz = "EDT")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M')
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S', tz = "EDT")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S', tz = "GMT")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S', tz = "CST")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S', tz = "CET")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S', tz = "CST6CDT")
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M:%S')
mydata$Timestamp <- as.POSIXct(mydata$Timestamp, '%m-%d-%Y %H:%M')
data <- data[mydata$Timestamp >= '1-1-2010 1:15' & mydata$Timestamp <= '2-17-2010. 23:45',]
## Saving data
data$daily = strftime(mydata$Timestamp, "%Y-%m-%d")
## Saving data
data$daily = strftime(mydata$Timestamp, "%m-%d-%Y")
